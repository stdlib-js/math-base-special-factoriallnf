{
  "version": 3,
  "sources": ["../lib/main.js", "../lib/index.js"],
  "sourcesContent": ["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isNegativeIntegerf = require( '@stdlib/math-base-assert-is-negative-integerf' );\nvar absgammalnf = require( '@stdlib/math-base-special-absgammalnf' );\nvar f32 = require( '@stdlib/number-float64-base-to-float32' );\n\n\n// VARIABLES //\n\nvar ONE = f32( 1.0 );\n\n\n// MAIN //\n\n/**\n* Evaluates the natural logarithm of the factorial of a single-precision floating-point number.\n*\n* @param {number} x - input value\n* @returns {number} natural logarithm of factorial of `x`\n*\n* @example\n* var v = factoriallnf( 3.0 );\n* // returns ~1.792\n*\n* @example\n* var v = factoriallnf( 2.4 );\n* // returns ~1.092\n*\n* @example\n* var v = factoriallnf( -1.0 );\n* // returns NaN\n*\n* @example\n* var v = factoriallnf( -1.5 );\n* // returns ~1.266\n*\n* @example\n* var v = factoriallnf( NaN );\n* // returns NaN\n*/\nfunction factoriallnf( x ) {\n\tx = f32( x );\n\tif ( isNegativeIntegerf( x ) ) {\n\t\treturn NaN;\n\t}\n\treturn absgammalnf( f32( x + ONE ) );\n}\n\n\n// EXPORTS //\n\nmodule.exports = factoriallnf;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Evaluate the natural logarithm of the factorial of a single-precision floating-point number.\n*\n* @module @stdlib/math-base-special-factoriallnf\n*\n* @example\n* var factoriallnf = require( '@stdlib/math-base-special-factoriallnf' );\n*\n* var v = factoriallnf( 3.0 );\n* // returns ~1.792\n*\n* v = factoriallnf( 2.4 );\n* // returns ~1.092\n*\n* v = factoriallnf( -1.0 );\n* // returns NaN\n*\n* v = factoriallnf( -1.5 );\n* // returns ~1.266\n*\n* v = factoriallnf( NaN );\n* // returns NaN\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n"],
  "mappings": "uGAAA,IAAAA,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAsBA,IAAIC,EAAqB,QAAS,+CAAgD,EAC9EC,EAAc,QAAS,uCAAwC,EAC/DC,EAAM,QAAS,wCAAyC,EAKxDC,EAAMD,EAAK,CAAI,EA+BnB,SAASE,EAAcC,EAAI,CAE1B,OADAA,EAAIH,EAAKG,CAAE,EACNL,EAAoBK,CAAE,EACnB,IAEDJ,EAAaC,EAAKG,EAAIF,CAAI,CAAE,CACpC,CAKAJ,EAAO,QAAUK,ICzBjB,IAAIE,EAAO,IAKX,OAAO,QAAUA",
  "names": ["require_main", "__commonJSMin", "exports", "module", "isNegativeIntegerf", "absgammalnf", "f32", "ONE", "factoriallnf", "x", "main"]
}
